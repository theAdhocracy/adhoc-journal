---
import CardAte from "@/components/CardAte.astro";
import CardEvent from "@/components/CardEvent.astro";
import CardTravel from "@/components/CardTravel.astro";
import CardVisit from "@/components/CardVisit.astro";
import SpotList from "@/components/SpotList.astro";
import Layout from "@/layouts/Layout.astro";
import { checkAuth } from "@/utils/auth";
import { formatContent } from "@/utils/content";
import { standardiseDateRoute, validDateRoute } from "@/utils/dateRoutes";

const { year, month, day } = Astro.params;

// Authenticated route
const isAuthenticated = checkAuth(Astro.cookies.get("auth"));

if (!isAuthenticated) {
	const currentPath = Astro.url.pathname;
	return Astro.redirect(`/login?path=${currentPath}`);
}

// Validate route
const isValid = validDateRoute(year, month, day);

if (!isValid || !day) {
	return Astro.redirect("/404");
}

// Standardise date
const apiDate = standardiseDateRoute(
	day as string,
	month as string,
	year as string
);
const contentDate = new Date(apiDate).toLocaleDateString("en-GB", {
	day: "numeric",
	month: "long",
	year: "numeric",
});

// Fetch page data
const data = await fetch(
	`https://cms.theadhocracy.co.uk/journal/${apiDate}.json`,
	{
		method: "GET",
		headers: {
			"content-type": "application/json",
			Authorization: `Bearer ${import.meta.env.CRAFT_API_KEY}`,
		},
	}
);
const response = await data.json();

// Standardise content
const content = formatContent(response.copy, "journal", response);
---

<Layout title={apiDate}>
	{
		isAuthenticated && response && (
			<main>
				<h1>
					{response.title || "Nothing To See Here"}
					<time datetime={apiDate}>{contentDate}</time>
				</h1>

				{content.map((block: { type: string; data?: any }) => {
					switch (block.type) {
						case "copy":
							return <Fragment set:html={block.data} />;
						case "ate":
							return <CardAte data={block.data} />;
						case "drank":
							return <h2>Drink</h2>;
						case "visit":
							return <CardVisit data={block.data} />;
						case "travel":
							return <CardTravel data={block.data} />;
						case "event":
							return <CardEvent data={block.data} />;
						default:
							return <Fragment set:html={block} />;
					}
				})}

				{response.footnotes?.map((footnote: any, index: number) => {
					return (
						<aside id={`footnote${index + 1}`}>
							<span>[{index + 1}]</span>
							<Fragment set:html={footnote} />
							<a
								href={`#reference${index + 1}`}
								title="Return to previous location in article."
								aria-label="Return to previous location in article."
							>
								‚Ü¨
							</a>
						</aside>
					);
				})}

				{response.sightings.length > 0 && <h2>Wildlife</h2>}
				{response.sightings?.map((spotlist: any) => {
					return <SpotList data={spotlist} />;
				})}

				{response.error && <p>Doesn't look like I was very busy today ü§∑‚Äç‚ôÄÔ∏è</p>}
			</main>
		)
	}
</Layout>
