---
import Layout from "@/layouts/Layout.astro";
import { checkAuth } from "@/utils/auth";
import { sortByMonth } from "@/utils/content";
import { validDateRoute } from "@/utils/dateRoutes";

const { year } = Astro.params;

// Authenticated route
const isAuthenticated = checkAuth(Astro.cookies.get("auth"));

if (!isAuthenticated) {
	const currentPath = Astro.url.pathname;
	return Astro.redirect(`/journal/login?path=${currentPath}`);
}

// Validate route
const isValid = validDateRoute(year);

if (!isValid || !year) {
	return Astro.redirect("/journal/404");
}

// Fetch page data
const data = await fetch(
	`https://cms.theadhocracy.co.uk/journal/year/${year}.json`,
	{
		method: "GET",
		headers: {
			"content-type": "application/json",
			Authorization: `Bearer ${import.meta.env.CRAFT_API_KEY}`,
		},
	}
);
const response = await data.json();

// Sort into months
const calendarSort = sortByMonth(response.data);

// Derive statistics
let entries = 0;
let checkins = 0;
let food = 0;
let drink = 0;
let friends = 0;

calendarSort.forEach((month) => {
	entries += month.length;

	month.forEach((day) => {
		checkins += day.checkins;
		food += day.ate;
		drink += day.drank;
		friends += day.people;
	});
});
---

<Layout title={year}
	>{
		isAuthenticated && (
			<main>
				<header>
					<h1>{year}</h1>
					<section class="stats">
						<h2>Total Stats</h2>
						<dl>
							<dt aria-label="Events." title="Events">
								📋
							</dt>
							<dd>{entries}</dd>
							<dt aria-label="Places visited." title="Places Visited">
								🗺
							</dt>
							<dd>{checkins}</dd>
							<dt aria-label="Meals out." title="Meals Out">
								🍽
							</dt>
							<dd>{food}</dd>
							<dt aria-label="Drinks tried." title="Drinks Tried">
								🍻
							</dt>
							<dd>{drink}</dd>
							<dt aria-label="Friends seen." title="Friends Seen">
								👪
							</dt>
							<dd>{friends}</dd>
						</dl>
					</section>
				</header>
				<section class="calendar">
					{calendarSort.map((month: any) => {
						const totalDays = [...Array(month[0].monthTotal)];
						const firstDay = new Date(
							Number(month[0].date.year),
							Number(month[0].date.month) - 1,
							1
						).getDay();

						return (
							<section class="calendar-leaf" data-month={month[0].date.month}>
								<a href={`/journal/${year}/${month[0].date.month}`}>
									<h2>{month[0].date.monthName}</h2>
								</a>
								<ol role="list">
									<li>M</li>
									<li>T</li>
									<li>W</li>
									<li>T</li>
									<li>F</li>
									<li>S</li>
									<li>S</li>
								</ol>
								<ol role="list">
									{totalDays.map((day, index) => {
										const normalisedDay =
											index >= 9 ? index + 1 : `0${index + 1}`;

										// If date has related entry, highlight it
										const dateEntry = month.find(
											(entry: any) =>
												entry.date.day === normalisedDay.toString()
										);

										if (dateEntry) {
											return (
												<li
													class:list={[
														index === 0 &&
															`month-start month-offset-${firstDay}`,
													]}
												>
													<a
														href={`/journal/${dateEntry.date.year}/${dateEntry.date.month}/${dateEntry.date.day}`}
													>
														{normalisedDay}
													</a>
												</li>
											);
										}
										return (
											<li
												class:list={[
													index === 0 && `month-start month-offset-${firstDay}`,
												]}
											>
												{normalisedDay}
											</li>
										);
									})}
								</ol>
								<details>
									<summary>View Entries</summary>
									<ul role="list" class="entry-leaf">
										{month.map((day: any) => {
											return (
												<li>
													<span>{day.date.day}</span>
													<a
														href={`/journal/${day.date.year}/${day.date.month}/${day.date.day}`}
													>
														<h3>{day.title}</h3>
													</a>
												</li>
											);
										})}
									</ul>
								</details>
							</section>
						);
					})}
				</section>
			</main>
		)
	}</Layout
>

<style>
	main {
		display: flex;
		flex-direction: column;
		gap: 4rem;
		padding-block: 2rem 3rem;
		padding-inline: 1.5rem;
		place-content: center;
		place-items: center;

		& h1 {
			width: 100%;
			text-align: center;
		}
	}

	.stats {
		margin-block-start: 2rem;
		text-align: center;

		& h2 {
			margin-block-end: 1rem;
			font-family: var(--font-copy);
			font-size: 1rem;
		}

		& dl {
			display: flex;
			flex-wrap: wrap;
			gap: 0.5rem;

			& dd + dt {
				margin-inline-start: 0.5rem;
			}
		}
	}

	.calendar {
		display: flex;
		flex-wrap: wrap;
		gap: 2rem;
		place-content: center;
		max-width: 80rem;
	}

	.calendar-leaf {
		display: grid;
		grid-template-columns: repeat(7, 1fr);
		grid-template-rows: repeat(9, max-content);
		width: 14rem;
		justify-items: center;

		& > a {
			grid-column: 1 / -1;
			margin-block-end: 1rem;
		}

		& ol {
			display: contents;
		}

		& details {
			grid-column: 1 / -1;
			width: 100%;
			height: max-content;
			margin-block-start: 1rem;
			text-align: center;
			border: 1px solid lightgray;
			border-radius: 0.25rem;

			& ul {
				overflow: auto;
				max-height: 15rem;
				padding: 1rem;
			}

			& li {
				width: 100%;

				& span {
					display: inline-flex;
					width: 1.5rem;
					height: 1.5rem;
					padding: 0.25rem;
					place-items: center;
					place-content: center;
					margin-block-start: 0.5rem;
					border: 2px solid var(--c-highlight);
					border-radius: 50%;
					font-size: 0.75rem;
					font-weight: bold;
				}
			}

			& h3 {
				font-size: 1.2rem;
				line-height: 1.3;
			}
		}

		/* Offset the first date */
		li.month-start {
			&.month-offset-1 {
				grid-column: 1;
			}

			&.month-offset-2 {
				grid-column: 2;
			}

			&.month-offset-3 {
				grid-column: 3;
			}

			&.month-offset-4 {
				grid-column: 4;
			}

			&.month-offset-5 {
				grid-column: 5;
			}

			&.month-offset-6 {
				grid-column: 6;
			}

			&.month-offset-0 {
				grid-column: 7;
			}
		}
	}
</style>
